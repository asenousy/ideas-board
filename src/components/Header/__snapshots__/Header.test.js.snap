// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders without crashing 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Header
    sortBy="date"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h1
          className="label"
        >
          Ideas Board:
        </h1>,
        <label
          className="label"
        >
          Sort by:
          <select
            className="select"
            onChange={[Function]}
            value="date"
          >
            <option
              value="date"
            >
              date
            </option>
            <option
              value="alphabetical"
            >
              alphabetical
            </option>
          </select>
        </label>,
      ],
      "className": "wrapper",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Ideas Board:",
          "className": "label",
        },
        "ref": null,
        "rendered": "Ideas Board:",
        "type": "h1",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Sort by:",
            <select
              className="select"
              onChange={[Function]}
              value="date"
            >
              <option
                value="date"
              >
                date
              </option>
              <option
                value="alphabetical"
              >
                alphabetical
              </option>
            </select>,
          ],
          "className": "label",
        },
        "ref": null,
        "rendered": Array [
          "Sort by:",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <option
                  value="date"
                >
                  date
                </option>,
                <option
                  value="alphabetical"
                >
                  alphabetical
                </option>,
              ],
              "className": "select",
              "onChange": [Function],
              "value": "date",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "date",
                  "value": "date",
                },
                "ref": null,
                "rendered": "date",
                "type": "option",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "alphabetical",
                  "value": "alphabetical",
                },
                "ref": null,
                "rendered": "alphabetical",
                "type": "option",
              },
            ],
            "type": "select",
          },
        ],
        "type": "label",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h1
            className="label"
          >
            Ideas Board:
          </h1>,
          <label
            className="label"
          >
            Sort by:
            <select
              className="select"
              onChange={[Function]}
              value="date"
            >
              <option
                value="date"
              >
                date
              </option>
              <option
                value="alphabetical"
              >
                alphabetical
              </option>
            </select>
          </label>,
        ],
        "className": "wrapper",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Ideas Board:",
            "className": "label",
          },
          "ref": null,
          "rendered": "Ideas Board:",
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Sort by:",
              <select
                className="select"
                onChange={[Function]}
                value="date"
              >
                <option
                  value="date"
                >
                  date
                </option>
                <option
                  value="alphabetical"
                >
                  alphabetical
                </option>
              </select>,
            ],
            "className": "label",
          },
          "ref": null,
          "rendered": Array [
            "Sort by:",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <option
                    value="date"
                  >
                    date
                  </option>,
                  <option
                    value="alphabetical"
                  >
                    alphabetical
                  </option>,
                ],
                "className": "select",
                "onChange": [Function],
                "value": "date",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "date",
                    "value": "date",
                  },
                  "ref": null,
                  "rendered": "date",
                  "type": "option",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "alphabetical",
                    "value": "alphabetical",
                  },
                  "ref": null,
                  "rendered": "alphabetical",
                  "type": "option",
                },
              ],
              "type": "select",
            },
          ],
          "type": "label",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`renders without crashing 2`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Header
    sortBy="alphabetical"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h1
          className="label"
        >
          Ideas Board:
        </h1>,
        <label
          className="label"
        >
          Sort by:
          <select
            className="select"
            onChange={[Function]}
            value="alphabetical"
          >
            <option
              value="date"
            >
              date
            </option>
            <option
              value="alphabetical"
            >
              alphabetical
            </option>
          </select>
        </label>,
      ],
      "className": "wrapper",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Ideas Board:",
          "className": "label",
        },
        "ref": null,
        "rendered": "Ideas Board:",
        "type": "h1",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Sort by:",
            <select
              className="select"
              onChange={[Function]}
              value="alphabetical"
            >
              <option
                value="date"
              >
                date
              </option>
              <option
                value="alphabetical"
              >
                alphabetical
              </option>
            </select>,
          ],
          "className": "label",
        },
        "ref": null,
        "rendered": Array [
          "Sort by:",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <option
                  value="date"
                >
                  date
                </option>,
                <option
                  value="alphabetical"
                >
                  alphabetical
                </option>,
              ],
              "className": "select",
              "onChange": [Function],
              "value": "alphabetical",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "date",
                  "value": "date",
                },
                "ref": null,
                "rendered": "date",
                "type": "option",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "alphabetical",
                  "value": "alphabetical",
                },
                "ref": null,
                "rendered": "alphabetical",
                "type": "option",
              },
            ],
            "type": "select",
          },
        ],
        "type": "label",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h1
            className="label"
          >
            Ideas Board:
          </h1>,
          <label
            className="label"
          >
            Sort by:
            <select
              className="select"
              onChange={[Function]}
              value="alphabetical"
            >
              <option
                value="date"
              >
                date
              </option>
              <option
                value="alphabetical"
              >
                alphabetical
              </option>
            </select>
          </label>,
        ],
        "className": "wrapper",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Ideas Board:",
            "className": "label",
          },
          "ref": null,
          "rendered": "Ideas Board:",
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Sort by:",
              <select
                className="select"
                onChange={[Function]}
                value="alphabetical"
              >
                <option
                  value="date"
                >
                  date
                </option>
                <option
                  value="alphabetical"
                >
                  alphabetical
                </option>
              </select>,
            ],
            "className": "label",
          },
          "ref": null,
          "rendered": Array [
            "Sort by:",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <option
                    value="date"
                  >
                    date
                  </option>,
                  <option
                    value="alphabetical"
                  >
                    alphabetical
                  </option>,
                ],
                "className": "select",
                "onChange": [Function],
                "value": "alphabetical",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "date",
                    "value": "date",
                  },
                  "ref": null,
                  "rendered": "date",
                  "type": "option",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "alphabetical",
                    "value": "alphabetical",
                  },
                  "ref": null,
                  "rendered": "alphabetical",
                  "type": "option",
                },
              ],
              "type": "select",
            },
          ],
          "type": "label",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
